#summary Usage guide for sardine.
#labels Featured

<wiki:toc max_depth="2" />

= Introduction =

Sardine is a next generation webdav client for java. However, it is intended to be extremely simple and not implement the full webdav client spec. Instead, I'm just providing methods for simple use case scenarios that I have. I want the code to run as fast as possible and use the latest released Apache httpclient code.

You will need commons-logging.jar and [http://hc.apache.org/ HttpClient/HttpCore 4.0.1] in your classpath. I've included these jars for convenience in the lib directory. Note: If you are using Java 5, you will need some version of JAXB 2.1.x and its dependencies (ie: jaxb-api-2.1.jar, jaxb-impl-2.1.12.jar, activation-1.1.1.jar and stax-api-1.0-2.jar) in your classpath as well.

= Methods =

To use Sardine, you first call {{{SardineFactory.begin()}}} or if you have HTTP auth enabled on your webdav server: {{{SardineFactory.begin(username, password)}}}. This will give you an instance of the Sardine interface. Note: once you begin() with a username/password, all method calls on the Sardine interface will use that same username/password.

Below is the list of methods on the Sardine interface and example of how to use them.

== {{{List<DavResource> getResources(String url)}}} ==

This returns a List of [http://sardine.googlecode.com/svn/trunk/javadoc/com/googlecode/sardine/DavResource.html DavResource] objects for a directory or a single [http://sardine.googlecode.com/svn/trunk/javadoc/com/googlecode/sardine/DavResource.html DavResource] for a file on a remote dav server. The url must end with a "/" for a directory. This implementation filters out ".DS_Store" files.

{{{
Sardine sardine = SardineFactory.begin();
List<DavResource> resources = sardine.getResources("http://yourdavserver.com/adirectory/");
for (DavResource res : resources)
{
     System.out.println(res); // calls the .toString() method.
}
}}}

== {{{InputStream getInputStream(String url)}}} ==

This will get an InputStream reference to a remote file. Obviously you want to point at a file and not a directory for this one.

{{{
Sardine sardine = SardineFactory.begin("username", "password");
InputStream is = sardine.getInputStream("http://yourdavserver.com/adirectory/afile.jpg");
}}}

== {{{void delete(String url)}}} ==

This uses HTTP PUT to delete a resource on a webdav server. Most likely you will want
to pass in a username/password for this one unless the server is behind a firewall. =)

{{{
Sardine sardine = SardineFactory.begin("username", "password");
sardine.delete("http://yourdavserver.com/adirectory/nameOfFile.jpg");
}}}

== {{{void put(String url, byte[] data)}}} ==

This allows you to HTTP PUT a file up on a webdav server. Most likely you will want
to pass in a username/password for this one unless the server is behind a firewall. =) It is also helpful to use the [http://commons.apache.org/io/ commons-io] library to read the file from disk.

{{{
Sardine sardine = SardineFactory.begin("username", "password");
byte[] data = FileUtils.readFileToByteArray(new File("/file/on/disk"));
sardine.put("http://yourdavserver.com/adirectory/nameOfFile.jpg", data);
}}}