#summary Usage guide for sardine.
#labels Featured

<wiki:toc max_depth="2" />

<wiki:gadget url="http://sardine.googlecode.com/svn/wiki/adsense.xml" border="0" width="468" height="60" />

= Introduction =

Sardine is a next generation webdav client for java. It is intended to be simple to use and does not implement the full webdav client spec. Instead, the goal is to provide methods for most use case scenarios when working with a webdav server. The code needs to run as fast as possible and use the latest released Apache HttpComponents.

= Dependencies =

You will need [http://commons.apache.org/logging/ commons-logging.jar], [http://commons.apache.org/codec/ commons-codec.jar] and [http://hc.apache.org/ HttpClient/HttpCore 4.1.1] in your classpath. I've included these jars for convenience in the lib directory. 

Java 5 does not include JAXB, but you are using Java 6 now, right? =) If not, you will need some version of JAXB 2.1.x and its dependencies (ie:  [http://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar jaxb-api-2.1.jar], [http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.12/jaxb-impl-2.1.12.jar jaxb-impl-2.1.12.jar], [http://repo1.maven.org/maven2/javax/activation/activation/1.1.1/activation-1.1.1.jar activation-1.1.1.jar] and [http://repo1.maven.org/maven2/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar stax-api-1.0-2.jar]
) in your classpath as well.

= Methods =

To use Sardine, you first call {{{SardineFactory.begin()}}} or if you have HTTP auth enabled on your webdav server: {{{SardineFactory.begin(username, password)}}}. This will give you an instance of the Sardine interface. Note: once you begin() with a username/password, all method calls on the Sardine interface will use that same username/password. 

By default, Sardine uses [http://hc.apache.org/httpcomponents-client/httpclient/xref/org/apache/http/conn/ssl/SSLSocketFactory.html SSLSocketFactory.getSocketFactory()] to support https requests. For customized SSL use, you can pass a [http://hc.apache.org/httpcomponents-client/httpclient/xref/org/apache/http/conn/ssl/SSLSocketFactory.html SSLSocketFactory] into the begin() methods. For customized proxy use, you can pass a [http://hc.apache.org/httpcomponents-client/httpclient/apidocs/org/apache/http/conn/routing/class-use/HttpRoutePlanner.html HttpRoutePlanner] into the methods on SardineFactory.

If you would like to specify a port number, just add it to the appropriate begin() method on SardineFactory. By default, it will assume port 80 (http) and 443 (https).

Below is the list of methods on the Sardine interface and example of how to use them. Each of these methods throws a [http://sardine.googlecode.com/svn/trunk/javadoc/com/googlecode/sardine/util/SardineException.html SardineException] which you should handle. [http://sardine.googlecode.com/svn/trunk/javadoc/com/googlecode/sardine/util/SardineException.html SardineException] has a few methods on it that reveal detailed information about any errors which might occur and the stack traces will show any underlying IOExceptions if they exist.

Sardine uses the HttpComponents [http://hc.apache.org/httpcomponents-client/httpclient/apidocs/org/apache/http/impl/conn/tsccm/ThreadSafeClientConnManager.html ThreadSafeClientConnManager]. This means that you can safely use an instance of Sardine in a multithreaded environment. However, be aware that the default values for [http://hc.apache.org/httpcomponents-client/httpclient/apidocs/org/apache/http/impl/conn/tsccm/ThreadSafeClientConnManager.html ThreadSafeClientConnManager] may not support enough concurrency for your environment. Therefore, it is probably safer to just call begin() each time you want to call methods on Sardine. If enough demand warrants it, I'd consider providing a way to tune these values.

----

== {{{List<DavResource> getResources(String url)}}} ==

This returns a List of [http://sardine.googlecode.com/svn/trunk/javadoc/com/googlecode/sardine/DavResource.html DavResource] objects for a directory or a single [http://sardine.googlecode.com/svn/trunk/javadoc/com/googlecode/sardine/DavResource.html DavResource] for a file on a remote dav server. The url must end with a "/" for a directory. This implementation filters out ".DS_Store" files.

{{{
Sardine sardine = SardineFactory.begin();
List<DavResource> resources = sardine.getResources("http://yourdavserver.com/adirectory/");
for (DavResource res : resources)
{
     System.out.println(res); // calls the .toString() method.
}
}}}

== {{{InputStream getInputStream(String url)}}} ==

This will get an InputStream reference to a remote file. Obviously you want to point at a file and not a directory for this one.

{{{
Sardine sardine = SardineFactory.begin("username", "password");
InputStream is = sardine.getInputStream("http://yourdavserver.com/adirectory/afile.jpg");
}}}

== {{{void put(String url, byte[] data, [String contentType])}}} ==

This allows you to HTTP PUT a file up on a webdav server. Most likely you will want
to pass in a username/password for this one unless the server is behind a firewall. =) It is also helpful to use the [http://commons.apache.org/io/ commons-io] library to read the file from disk.

{{{
Sardine sardine = SardineFactory.begin("username", "password");
byte[] data = FileUtils.readFileToByteArray(new File("/file/on/disk"));
sardine.put("http://yourdavserver.com/adirectory/nameOfFile.jpg", data);
}}}

Optionally, you may specify a Content-Type header value.

== {{{void put(String url, InputStream dataStream, [String contentType])}}} ==

This allows you to HTTP PUT a file up on a webdav server. 
It takes an InputStream so that you don't have to buffer the entire file into 
memory first as a byte array. Note that due to limitations in HttpClient, basic auth is the only form of authentication that is supported.

{{{
Sardine sardine = SardineFactory.begin();
InputStream fis = new FileInputStream(new File("/some/file/on/disk.txt"));
sardine.put("http://yourdavserver.com/adirectory/nameOfFile.jpg", fis);
}}}

Optionally, you may specify a Content-Type header value.

== {{{void delete(String url)}}} ==

This uses HTTP PUT to delete a resource on a webdav server. Most likely you will want
to pass in a username/password for this one unless the server is behind a firewall. =)

{{{
Sardine sardine = SardineFactory.begin("username", "password");
sardine.delete("http://yourdavserver.com/adirectory/nameOfFile.jpg");
}}}

== {{{void createDirectory(String url)}}} ==

This creates a directory on the remote server.

{{{
Sardine sardine = SardineFactory.begin("username", "password");
sardine.createDirectory("http://yourdavserver.com/adirectory/");
}}}

== {{{void move(String sourceUrl, String destinationUrl)}}} ==

This moves a file from one location to another on the remote server. It assumes you want to overwrite all files.

{{{
Sardine sardine = SardineFactory.begin("username", "password");
sardine.move("http://yourdavserver.com/adirectory/file1.jpg", "http://yourdavserver.com/adirectory/file2.jpg");
}}}

== {{{void copy(String sourceUrl, String destinationUrl)}}} ==

This copies a file from one location to another on the remote server. It assumes you want to overwrite all files.

{{{
Sardine sardine = SardineFactory.begin("username", "password");
sardine.copy("http://yourdavserver.com/adirectory/file1.jpg", "http://yourdavserver.com/adirectory/file2.jpg");
}}}

== {{{boolean exists(String url)}}} ==

This uses a HTTP HEAD request to see if a file exists on the remote server.

{{{
Sardine sardine = SardineFactory.begin();
if (sardine.exists("http://yourdavserver.com/adirectory/file1.jpg"))
    System.out.println("got here!");
}}}

== {{{void setCustomProps(String url, Map<String,String> addProps, List<String> removeProps)}}} ==

This uses a HTTP PROPPATCH request to add and/or remove custom properties on a file that exist on a remote server.

{{{
Sardine sardine = SardineFactory.begin();

String someUrl = "http://yourdavserver.com/adirectory/somefile.pdf";

// 1. Set custom properties on a resource:

Map<String,String> addProps = new HashMap<String,String>(2);
addProps.put("author", "J. Diamond");
addProps.put("title", "The Third Chimpanzee");

sardine.setCustomProps(someURL, addProps, null)

// 2. Retrieve custom properties on a resource:

List<DavResource> resources = sardine.getResources(someURL)

for(DavResource resource : resources) {
    Map<String,String> customProps = resource.getCustomProps();
    // Use custom properties...
    String author = (String) customProps.get("author");
    String title = (String) customProps.get("title");
}

// 3. Update and/or delete custom properties on a resource:

Map<String,String> updateProps = new HashMap<String,String>(1);
updateProps.put("author", "Jared Diamond");

List<String> removeProps = new ArrayList<String>(1);
removeProps.add("title");

sardine.setCustomProps(someURL, updateProps, removeProps)

}}}


<wiki:gadget url="http://sardine.googlecode.com/svn/wiki/adsense.xml" border="0" width="468" height="60" />
